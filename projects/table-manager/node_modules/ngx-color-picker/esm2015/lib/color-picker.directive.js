import { __decorate } from "tslib";
import { Directive, OnChanges, OnDestroy, Input, Output, EventEmitter, HostListener, ApplicationRef, ComponentRef, ElementRef, ViewContainerRef, Injector, ReflectiveInjector, ComponentFactoryResolver, EmbeddedViewRef } from '@angular/core';
import { ColorPickerService } from './color-picker.service';
import { ColorPickerComponent } from './color-picker.component';
let ColorPickerDirective = class ColorPickerDirective {
    constructor(injector, cfr, appRef, vcRef, elRef, _service) {
        this.injector = injector;
        this.cfr = cfr;
        this.appRef = appRef;
        this.vcRef = vcRef;
        this.elRef = elRef;
        this._service = _service;
        this.dialogCreated = false;
        this.ignoreChanges = false;
        this.viewAttachedToAppRef = false;
        this.cpWidth = '230px';
        this.cpHeight = 'auto';
        this.cpToggle = false;
        this.cpDisabled = false;
        this.cpIgnoredElements = [];
        this.cpFallbackColor = '';
        this.cpColorMode = 'color';
        this.cpCmykEnabled = false;
        this.cpOutputFormat = 'auto';
        this.cpAlphaChannel = 'enabled';
        this.cpDisableInput = false;
        this.cpDialogDisplay = 'popup';
        this.cpSaveClickOutside = true;
        this.cpCloseClickOutside = true;
        this.cpUseRootViewContainer = false;
        this.cpPosition = 'auto';
        this.cpPositionOffset = '0%';
        this.cpPositionRelativeToArrow = false;
        this.cpOKButton = false;
        this.cpOKButtonText = 'OK';
        this.cpOKButtonClass = 'cp-ok-button-class';
        this.cpCancelButton = false;
        this.cpCancelButtonText = 'Cancel';
        this.cpCancelButtonClass = 'cp-cancel-button-class';
        this.cpPresetLabel = 'Preset colors';
        this.cpPresetColorsClass = 'cp-preset-colors-class';
        this.cpMaxPresetColorsLength = 6;
        this.cpPresetEmptyMessage = 'No colors added';
        this.cpPresetEmptyMessageClass = 'preset-empty-message';
        this.cpAddColorButton = false;
        this.cpAddColorButtonText = 'Add color';
        this.cpAddColorButtonClass = 'cp-add-color-button-class';
        this.cpRemoveColorButtonClass = 'cp-remove-color-button-class';
        this.cpInputChange = new EventEmitter(true);
        this.cpToggleChange = new EventEmitter(true);
        this.cpSliderChange = new EventEmitter(true);
        this.cpSliderDragEnd = new EventEmitter(true);
        this.cpSliderDragStart = new EventEmitter(true);
        this.colorPickerOpen = new EventEmitter(true);
        this.colorPickerClose = new EventEmitter(true);
        this.colorPickerCancel = new EventEmitter(true);
        this.colorPickerSelect = new EventEmitter(true);
        this.colorPickerChange = new EventEmitter(false);
        this.cpCmykColorChange = new EventEmitter(true);
        this.cpPresetColorsChange = new EventEmitter(true);
    }
    handleClick() {
        this.inputFocus();
    }
    handleFocus() {
        this.inputFocus();
    }
    handleInput(event) {
        this.inputChange(event);
    }
    ngOnDestroy() {
        if (this.cmpRef != null) {
            if (this.viewAttachedToAppRef) {
                this.appRef.detachView(this.cmpRef.hostView);
            }
            this.cmpRef.destroy();
            this.cmpRef = null;
            this.dialog = null;
        }
    }
    ngOnChanges(changes) {
        if (changes.cpToggle && !this.cpDisabled) {
            if (changes.cpToggle.currentValue) {
                this.openDialog();
            }
            else if (!changes.cpToggle.currentValue) {
                this.closeDialog();
            }
        }
        if (changes.colorPicker) {
            if (this.dialog && !this.ignoreChanges) {
                if (this.cpDialogDisplay === 'inline') {
                    this.dialog.setInitialColor(changes.colorPicker.currentValue);
                }
                this.dialog.setColorFromString(changes.colorPicker.currentValue, false);
                if (this.cpUseRootViewContainer && this.cpDialogDisplay !== 'inline') {
                    this.cmpRef.changeDetectorRef.detectChanges();
                }
            }
            this.ignoreChanges = false;
        }
        if (changes.cpPresetLabel || changes.cpPresetColors) {
            if (this.dialog) {
                this.dialog.setPresetConfig(this.cpPresetLabel, this.cpPresetColors);
            }
        }
    }
    openDialog() {
        if (!this.dialogCreated) {
            let vcRef = this.vcRef;
            this.dialogCreated = true;
            this.viewAttachedToAppRef = false;
            if (this.cpUseRootViewContainer && this.cpDialogDisplay !== 'inline') {
                const classOfRootComponent = this.appRef.componentTypes[0];
                const appInstance = this.injector.get(classOfRootComponent, Injector.NULL);
                if (appInstance !== Injector.NULL) {
                    vcRef = appInstance.vcRef || appInstance.viewContainerRef || this.vcRef;
                    if (vcRef === this.vcRef) {
                        console.warn('You are using cpUseRootViewContainer, ' +
                            'but the root component is not exposing viewContainerRef!' +
                            'Please expose it by adding \'public vcRef: ViewContainerRef\' to the constructor.');
                    }
                }
                else {
                    this.viewAttachedToAppRef = true;
                }
            }
            const compFactory = this.cfr.resolveComponentFactory(ColorPickerComponent);
            if (this.viewAttachedToAppRef) {
                this.cmpRef = compFactory.create(this.injector);
                this.appRef.attachView(this.cmpRef.hostView);
                document.body.appendChild(this.cmpRef.hostView.rootNodes[0]);
            }
            else {
                const injector = ReflectiveInjector.fromResolvedProviders([], vcRef.parentInjector);
                this.cmpRef = vcRef.createComponent(compFactory, 0, injector, []);
            }
            this.cmpRef.instance.setupDialog(this, this.elRef, this.colorPicker, this.cpWidth, this.cpHeight, this.cpDialogDisplay, this.cpFallbackColor, this.cpColorMode, this.cpCmykEnabled, this.cpAlphaChannel, this.cpOutputFormat, this.cpDisableInput, this.cpIgnoredElements, this.cpSaveClickOutside, this.cpCloseClickOutside, this.cpUseRootViewContainer, this.cpPosition, this.cpPositionOffset, this.cpPositionRelativeToArrow, this.cpPresetLabel, this.cpPresetColors, this.cpPresetColorsClass, this.cpMaxPresetColorsLength, this.cpPresetEmptyMessage, this.cpPresetEmptyMessageClass, this.cpOKButton, this.cpOKButtonClass, this.cpOKButtonText, this.cpCancelButton, this.cpCancelButtonClass, this.cpCancelButtonText, this.cpAddColorButton, this.cpAddColorButtonClass, this.cpAddColorButtonText, this.cpRemoveColorButtonClass);
            this.dialog = this.cmpRef.instance;
            if (this.vcRef !== vcRef) {
                this.cmpRef.changeDetectorRef.detectChanges();
            }
        }
        else if (this.dialog) {
            this.dialog.openDialog(this.colorPicker);
        }
    }
    closeDialog() {
        if (this.dialog && this.cpDialogDisplay === 'popup') {
            this.dialog.closeDialog();
        }
    }
    cmykChanged(value) {
        this.cpCmykColorChange.emit(value);
    }
    stateChanged(state) {
        this.cpToggleChange.emit(state);
        if (state) {
            this.colorPickerOpen.emit(this.colorPicker);
        }
        else {
            this.colorPickerClose.emit(this.colorPicker);
        }
    }
    colorChanged(value, ignore = true) {
        this.ignoreChanges = ignore;
        this.colorPickerChange.emit(value);
    }
    colorSelected(value) {
        this.colorPickerSelect.emit(value);
    }
    colorCanceled() {
        this.colorPickerCancel.emit();
    }
    inputFocus() {
        const element = this.elRef.nativeElement;
        const ignored = this.cpIgnoredElements.filter((item) => item === element);
        if (!this.cpDisabled && !ignored.length) {
            if (typeof document !== 'undefined' && element === document.activeElement) {
                this.openDialog();
            }
            else if (!this.dialog || !this.dialog.show) {
                this.openDialog();
            }
            else {
                this.closeDialog();
            }
        }
    }
    inputChange(event) {
        if (this.dialog) {
            this.dialog.setColorFromString(event.target.value, true);
        }
        else {
            this.colorPicker = event.target.value;
            this.colorPickerChange.emit(this.colorPicker);
        }
    }
    inputChanged(event) {
        this.cpInputChange.emit(event);
    }
    sliderChanged(event) {
        this.cpSliderChange.emit(event);
    }
    sliderDragEnd(event) {
        this.cpSliderDragEnd.emit(event);
    }
    sliderDragStart(event) {
        this.cpSliderDragStart.emit(event);
    }
    presetColorsChanged(value) {
        this.cpPresetColorsChange.emit(value);
    }
};
ColorPickerDirective.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ApplicationRef },
    { type: ViewContainerRef },
    { type: ElementRef },
    { type: ColorPickerService }
];
__decorate([
    Input()
], ColorPickerDirective.prototype, "colorPicker", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpWidth", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpHeight", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpToggle", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpDisabled", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpIgnoredElements", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpFallbackColor", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpColorMode", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpCmykEnabled", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpOutputFormat", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpAlphaChannel", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpDisableInput", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpDialogDisplay", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpSaveClickOutside", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpCloseClickOutside", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpUseRootViewContainer", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpPosition", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpPositionOffset", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpPositionRelativeToArrow", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpOKButton", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpOKButtonText", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpOKButtonClass", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpCancelButton", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpCancelButtonText", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpCancelButtonClass", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpPresetLabel", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpPresetColors", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpPresetColorsClass", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpMaxPresetColorsLength", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpPresetEmptyMessage", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpPresetEmptyMessageClass", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpAddColorButton", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpAddColorButtonText", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpAddColorButtonClass", void 0);
__decorate([
    Input()
], ColorPickerDirective.prototype, "cpRemoveColorButtonClass", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "cpInputChange", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "cpToggleChange", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "cpSliderChange", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "cpSliderDragEnd", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "cpSliderDragStart", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "colorPickerOpen", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "colorPickerClose", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "colorPickerCancel", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "colorPickerSelect", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "colorPickerChange", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "cpCmykColorChange", void 0);
__decorate([
    Output()
], ColorPickerDirective.prototype, "cpPresetColorsChange", void 0);
__decorate([
    HostListener('click')
], ColorPickerDirective.prototype, "handleClick", null);
__decorate([
    HostListener('focus')
], ColorPickerDirective.prototype, "handleFocus", null);
__decorate([
    HostListener('input', ['$event'])
], ColorPickerDirective.prototype, "handleInput", null);
ColorPickerDirective = __decorate([
    Directive({
        selector: '[colorPicker]',
        exportAs: 'ngxColorPicker'
    })
], ColorPickerDirective);
export { ColorPickerDirective };
//# sourceMappingURL=data:application/json;base64,