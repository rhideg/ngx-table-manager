import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener, ElementRef } from '@angular/core';
export function detectIE() {
    var ua = '';
    if (typeof navigator !== 'undefined') {
        ua = navigator.userAgent.toLowerCase();
    }
    var msie = ua.indexOf('msie ');
    if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }
    // Other browser
    return false;
}
var TextDirective = /** @class */ (function () {
    function TextDirective() {
        this.newValue = new EventEmitter();
    }
    TextDirective.prototype.inputChange = function (event) {
        var value = event.target.value;
        if (this.rg === undefined) {
            this.newValue.emit(value);
        }
        else {
            var numeric = parseFloat(value);
            this.newValue.emit({ v: numeric, rg: this.rg });
        }
    };
    __decorate([
        Input()
    ], TextDirective.prototype, "rg", void 0);
    __decorate([
        Input()
    ], TextDirective.prototype, "text", void 0);
    __decorate([
        Output()
    ], TextDirective.prototype, "newValue", void 0);
    __decorate([
        HostListener('input', ['$event'])
    ], TextDirective.prototype, "inputChange", null);
    TextDirective = __decorate([
        Directive({
            selector: '[text]'
        })
    ], TextDirective);
    return TextDirective;
}());
export { TextDirective };
var SliderDirective = /** @class */ (function () {
    function SliderDirective(elRef) {
        var _this = this;
        this.elRef = elRef;
        this.dragEnd = new EventEmitter();
        this.dragStart = new EventEmitter();
        this.newValue = new EventEmitter();
        this.listenerMove = function (event) { return _this.move(event); };
        this.listenerStop = function () { return _this.stop(); };
    }
    SliderDirective.prototype.mouseDown = function (event) {
        this.start(event);
    };
    SliderDirective.prototype.touchStart = function (event) {
        this.start(event);
    };
    SliderDirective.prototype.move = function (event) {
        event.preventDefault();
        this.setCursor(event);
    };
    SliderDirective.prototype.start = function (event) {
        this.setCursor(event);
        event.stopPropagation();
        document.addEventListener('mouseup', this.listenerStop);
        document.addEventListener('touchend', this.listenerStop);
        document.addEventListener('mousemove', this.listenerMove);
        document.addEventListener('touchmove', this.listenerMove);
        this.dragStart.emit();
    };
    SliderDirective.prototype.stop = function () {
        document.removeEventListener('mouseup', this.listenerStop);
        document.removeEventListener('touchend', this.listenerStop);
        document.removeEventListener('mousemove', this.listenerMove);
        document.removeEventListener('touchmove', this.listenerMove);
        this.dragEnd.emit();
    };
    SliderDirective.prototype.getX = function (event) {
        var position = this.elRef.nativeElement.getBoundingClientRect();
        var pageX = (event.pageX !== undefined) ? event.pageX : event.touches[0].pageX;
        return pageX - position.left - window.pageXOffset;
    };
    SliderDirective.prototype.getY = function (event) {
        var position = this.elRef.nativeElement.getBoundingClientRect();
        var pageY = (event.pageY !== undefined) ? event.pageY : event.touches[0].pageY;
        return pageY - position.top - window.pageYOffset;
    };
    SliderDirective.prototype.setCursor = function (event) {
        var width = this.elRef.nativeElement.offsetWidth;
        var height = this.elRef.nativeElement.offsetHeight;
        var x = Math.max(0, Math.min(this.getX(event), width));
        var y = Math.max(0, Math.min(this.getY(event), height));
        if (this.rgX !== undefined && this.rgY !== undefined) {
            this.newValue.emit({ s: x / width, v: (1 - y / height), rgX: this.rgX, rgY: this.rgY });
        }
        else if (this.rgX === undefined && this.rgY !== undefined) {
            this.newValue.emit({ v: y / height, rgY: this.rgY });
        }
        else if (this.rgX !== undefined && this.rgY === undefined) {
            this.newValue.emit({ v: x / width, rgX: this.rgX });
        }
    };
    SliderDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    __decorate([
        Input()
    ], SliderDirective.prototype, "rgX", void 0);
    __decorate([
        Input()
    ], SliderDirective.prototype, "rgY", void 0);
    __decorate([
        Input()
    ], SliderDirective.prototype, "slider", void 0);
    __decorate([
        Output()
    ], SliderDirective.prototype, "dragEnd", void 0);
    __decorate([
        Output()
    ], SliderDirective.prototype, "dragStart", void 0);
    __decorate([
        Output()
    ], SliderDirective.prototype, "newValue", void 0);
    __decorate([
        HostListener('mousedown', ['$event'])
    ], SliderDirective.prototype, "mouseDown", null);
    __decorate([
        HostListener('touchstart', ['$event'])
    ], SliderDirective.prototype, "touchStart", null);
    SliderDirective = __decorate([
        Directive({
            selector: '[slider]'
        })
    ], SliderDirective);
    return SliderDirective;
}());
export { SliderDirective };
var SliderPosition = /** @class */ (function () {
    function SliderPosition(h, s, v, a) {
        this.h = h;
        this.s = s;
        this.v = v;
        this.a = a;
    }
    return SliderPosition;
}());
export { SliderPosition };
var SliderDimension = /** @class */ (function () {
    function SliderDimension(h, s, v, a) {
        this.h = h;
        this.s = s;
        this.v = v;
        this.a = a;
    }
    return SliderDimension;
}());
export { SliderDimension };
//# sourceMappingURL=data:application/json;base64,